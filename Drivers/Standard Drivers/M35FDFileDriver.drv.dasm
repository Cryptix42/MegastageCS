; *************************
; Project: Special Codes
; File: FileDriver.lib.dasm
; *************************

;===============Library data==================
.define cryptFS_magic_number 0xA2FA
.define cryptFS_version 0x0001
.define m35fd_id_a 0x24c5
.define m35fd_id_b 0x4fd5
:FDError dat 0 ;0=no error, 1=no such drive, 2=FS query error, 3=wrong or no header
:disk_drive dat 0xffff
:disk_drive_hwi dat 0xffff
:m35fd_state dat 0
:m35fd_error dat 0
:header_type dat 0 ;0=no data, 1=root, 2=folder, 3=file header
:header_space
.reserve 1024
:sector_allocation_1
.reserve 512
:sector_allocation_2
.reserve 512
dat 0

;===============Library code==================

;Sets A to latest error since last poll.
:poll_fd_error
set a, [FDError]
set [FDError], 0
set pc, pop

;Param A and B. First it selects drive A. It then wipes all sectors by setting all their data to null. 
;Next it sets the first word of sector 0 to the FS magic number, the next to the version, and the next 
;4 words to the name starting at B. Next it sets the first 2 bits of the ownership bitmap to 1. Finally, 
;it calls the "generate_corruption_bitmap" function before ending.
:format_disk
jsr disk_drive_select
set push, a
set push, b
set push, c
set a, 0
set b, sector_allocation_1
set c, 1024
jsr memory_fill
set c, peek
set a, 0xffff
:disk_wipe_loop
add a, 1
set b, sector_allocation_1
jsr write_sector
ifn a, 2047
set pc, disk_wipe_loop
set b, pick 1
set [sector_allocation_1], cryptFS_magic_number
set [sector_allocation_1+1], cryptFS_version
set [sector_allocation_1+2], [b]
set [sector_allocation_1+3], [b+1]
set [sector_allocation_1+4], [b+2]
set [sector_allocation_2], 0b1100000000000000
set a, 1
set b, sector_allocation_1
jsr write_sector
set a, 2
set b, sector_allocation_2
jsr write_sector
set c, pop
set b, pop
set a, pop
jsr generate_corruption_bitmap
set pc, pop

;Params A. A = start of 8 word (16 character) ASCII name.
;This function loads the header of a file or folder who's name matches the text 
;string pointed to by A by iterating through the currently loaded header and
;at each iteration, loading the header sector and comparing the names until a match
;is found then replacing the currently loaded header with the new header.
;If no name match is found or no header is loaded then it will set FSError to 2.
;ALMOST, BUT NOT, FINISHED
:open_header
set push, a
set push, b
set push, c
set push, i
set push, j
set push, z
set z, a
ife [header_type], 0
set pc, search_disk_drives
ife [header_type], 1
set pc, search_header_entries
ife [header_type], 2
set pc, search_header_entries
ife [header_type], 3
set [FDError], 3
:open_header_finish
set z, pop
set j, pop
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop
:search_disk_drives
jsr m35fd_amount
set j, a
set a, 0xffff
:search_disk_drives_loop
iaq 1
add a, 1
jsr disk_drive_select
set push, a
set push, b
set b, sector_allocation_1
set a, 0
jsr read_sector
set c, 8
set b, sector_allocation_1+2
set a, z
jsr memory_compare
set b, pop
set a, pop
iaq 0
ife [sector_allocation_1], cryptFS_magic_number
ife [sector_allocation_1+1], cryptFS_version
ife i, 1
set pc, search_drive_finish
ifn a, i
set pc, search_disk_drives_loop
set [FDError], 2
set pc, open_header_finish
:search_drive_finish
set b, header_space
set a, 0
jsr read_sector
add b, 512
add a, 1
jsr read_sector
set [header_type], 1
set b, sector_allocation_1
set c, 1024
set a, 0
jsr memory_fill
set pc, open_header_finish
:search_header_entries
set a, 0xffff
:search_header_entries_loop
add a, 1
set push, a
set push, b
set b, sector_allocation_1
mul a, 2
add a, 8
set [open_header_var1], [header_space+a]
add a, 1
set a, [header_space+a]
jsr read_sector
set c, 8
set b, sector_allocation_1
set a, z
jsr memory_compare
set b, pop
set a, pop
ife i, 1
set pc, search_header_finish
ifn a, i
set pc, search_header_entries_loop
set [FDError], 2
set pc, open_header_finish
:search_header_finish
set [header_type], 3
ife [open_header_var1], 0xffff
set [header_type], 2
set c, 512
set a, header_space
set b, sector_allocation_1
jsr memory_copy
set c, 1024
set a, 0
jsr memory_fill
set pc, open_header_finish
:open_header_var1 dat 0

:close_header
set push, a
set push, b
set push, c
jsr m35fd_int_unset
set c, 2053
set b, m35fd_state
set a, 0
jsr memory_fill
set [disk_drive], 0xffff
set [disk_drive_hwi], 0xffff
set c, pop
set b, pop
set a, pop
set pc, pop

;Params A and B. Returns name of file/folder/root at entry/HW_index A of opened header/disk drives and returns it to RAM starting at B.
:get_name
set push, a
set push, b
ife [header_type], 0
set pc, get_root_name
ife [header_type], 1
set pc, get_entry_name
ife [header_type], 2
set pc, get_entry_name
ife [header_type], 3
set [FDError], 3
:get_name_finish
set b, pop
set a, pop
set pc, pop
:get_root_name
iaq 1
jsr disk_drive_select
set b, sector_allocation_1
set a, 0
jsr read_sector
set c, 8
set b, sector_allocation_1+2
set a, peek
jsr memory_copy
iaq 0
set pc, get_name_finish
:get_entry_name
set b, sector_allocation_1
mul a, 2
add a, 9
ife [header_type], 1
add a, 2
set a, [header_space+a]
ife a, 0
set [FDError], 2
ife a, 0
set pc, get_name_finish
jsr read_sector
set c, 8
set b, sector_allocation_1+2
set a, peek
jsr memory_copy
set pc, get_name_finish

;Param A. Requires a root or folder header to be opened. Generates and empty folder sector with name at A and loads it to the 
;disk after saving it as an entry to the opened Root/Folder header.
:create_folder
set push, a
set a, 0
set c, 512
set b, sector_allocation_1
jsr memory_fill
set a, peek
set [sector_allocation_1], [a]
set [sector_allocation_1+1], [a+1]
set [sector_allocation_1+2], [a+2]
set [sector_allocation_1+3], [a+3]
set [sector_allocation_1+4], [a+4]
set [sector_allocation_1+5], [a+5]
set [sector_allocation_1+6], [a+6]
set [sector_allocation_1+7], [a+7]


set a, pop
set pc, pop

;Param A and B. Requires a root or folder header to be opened. At folder entry with the name at A it resets it's corrospondng 
;bit in the File Ownership Bitmap, next it deletes it's entry from the loaded header and wipes the sector it points to. 
;FOLDER TABLE MUST BE EMPTY TO DELETE.
:delete_folder
set pc, pop

;Param A and B. Requires a root or folder header to be opened. Similar to "create_folder" except it generates a file header with 
;an empty bitmap and the filetpe B then saves it. Next it adds an entry for the new file to the opened Root/Folder header.
:create_file
set pc, pop

;Param A. Requires a root or folder header to be opened. At file entry with the name at A it resets all the bits in the 
;File Ownership Bitmap that are set in the File Fragment Bitmap, next it deletes the entry and the header it points to 
;but temporarily saves the File Fragment Bitmap and finishes by wiping all the sectors on the bitmap. 
;ONLY WORKS WITH FILES.
:delete_file
set pc, pop

;Params A and B. Requires a file header to be opened. Loads sector A of the file to RAM starting at B.
:load_file_sector
set pc, pop

;Params A and B. Requires a file header to be opened. Writes sector A of the file from RAM starting at B.
:save_file_sector
set pc, pop

;Params A. Requires a file header to be opened. Wipes sector A of the file and resets it's corrosponding bit in the 
;File Fragment Bitmap and the File Ownership Bitmap, then decreases the "file size" value in the header by 1.
:delete_file_sector
set pc, pop

;Params A. Requires a file header to be opened. Adds a file sector to the file by setting the corrosponding bit of the next 
;free sector in the File Ownership Bitmap and then setting the same bit in the File Fragment Bitmap, then it increases the 
;"file size" value in the header by 1. Finally it writes the new sector to from RAM at A to it's new space.
:append_file_sector
set pc, pop
;===========Library subroutines===============
;First it loads the bitmap sector from the disk header then iterates through all sectors on the 
;disk and through each bit on the corruption map and tries to load each sector. if a broken sector 
;error is recieved it will set the bit to 1 and if not it will set it to 0 then move on to the next. 
;When finished it will load the bitmap to the corruption bitmap sector area in the disks header.
:generate_corruption_bitmap
set push, a
set push, b
set push, c
set a, 2
set b, sector_allocation_1
jsr read_sector
set a, 0
set b, sector_allocation_1+128
set c, 128
jsr memory_fill
set c, peek
set a, 0xffff
set b, sector_allocation_2
:generate_corruption_bitmap_loop
add a, 1
jsr read_sector
ife b, 0xffff
jsr broken_sector_true
ifn a, 2047
set pc, generate_corruption_bitmap_loop
set a, 1
set b, sector_allocation_1
jsr write_sector
set c, 1024
set a, 0
jsr memory_fill
set c, pop
set b, pop
set a, pop
set pc, pop
:broken_sector_true
set push, a
set b, a
set a, sector_allocation_1+128
jsr set_bit
set b, sector_allocation_2
set a, pop
set pc, pop

;sets the index of the drive for the file driver functions to interact with to A 
:disk_drive_select
jsr close_header
set push, a
set push, b
set push, c
set push, i
set push, j
set push, x
set push, y
set push, z
set push, ex
set [disk_drive], a
hwn i
sub i, 1
set j, 0xffff
set z, a
:m35fd_search_loop
add j, 1
hwq j
ife a, m35fd_id_a
ife b, m35fd_id_b
sub z, 1
ife j, i
ifn z, 0xffff
set [FDError], 1
ife j, i
ifn z, 0xffff
set pc, m35fd_search_loop_brk
ife z, 0xffff
set [disk_drive_hwi], j
ifn z, 0xffff
set pc, m35fd_search_loop
:m35fd_search_loop_brk
set ex, pop
set z, pop
set y, pop
set x, pop
set j, pop
set i, pop
set c, pop
set b, pop
set a, pop
jsr m35fd_int_set
set pc, pop

;param registers A and B. A = start address, B = bit index
;starting at address A it goes to the bit at offset B from the first bit of A and toggles the bit.
:set_bit
set push, a
set push, b
set push, c
set push, i
set c, 1
shl c, 15
set i, b
and i, 0x000f
and b, 0xfff0
shr b, 4
shr c, i
add a, b
xor [a], c
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop

;param registers A and B. returns C. A = start address, B = bit index, C = bit return
;starting at address A it goes to the bit at offset B from the first bit of A and returns the bit in C.
:get_bit
set push, a
set push, b
set push, i
set c, 1
shl c, 15
set i, b
and i, 0x000f
and b, 0xfff0
shr b, 4
shr c, i
add a, b
and c, [a]
shl c, i
shr c, 15
set i, pop
set b, pop
set a, pop
set pc, pop

;param registers A, C, and I. returns B. A = starting address B = bit index of the first bit that equals C
;I = final bit. starting at the first bit of address A, it iterates through all bits of all addresses after 
;till it reaches the first bit that equals C or reaches bit index I and returns the bit's index in B, if it 
;reaches I before a bit is found then B is returns as 0xffff.
:search_bit
set push, x
set push, y
set push, z
set x, c
and x, 1
set b, 0xffff
add i, 1
:search_bit_loop
add b, 1
sub i, 1
jsr get_bit
ifn i, 0
ifn x, c
set pc, search_bit_loop
ifn x, c
set b, 0xffff
set z, pop
set y, pop
set x, pop
set pc, pop

;Params A and B. A=sector, B=ram address
;sets B to 0xffff if the sector is broken
:read_sector
set push, a
set push, b
set push, x
set push, y
set x, a
set y, b
set a, 1
ife [disk_drive_hwi], 0xffff
jsr disk_drive_select
set a, 2
hwi [disk_drive_hwi]
set y, pop
set x, pop
ifn b, 5
set b, pop
ife b, 5
set a, pop
set a, pop
ife b, 5
set b, 0xffff
set pc, pop

;Params A and B. A=sector, B=ram address
;sets B to 0xffff if the sector is broken
:write_sector
set push, a
set push, b
set push, x
set push, y
set x, a
set y, b
set a, 1
ife [disk_drive_hwi], 0xffff
jsr disk_drive_select
set a, 3
hwi [disk_drive_hwi]
set y, pop
set x, pop
ifn b, 5
set b, pop
ife b, 5
set a, pop
set a, pop
ife b, 5
set b, 0xffff
set pc, pop

:m35fd_amount
set push, b
set push, c
set push, i
set push, j
set push, x
set push, y
set push, z
set push, ex
hwn i
sub i, 1
set j, 0xffff
set z, 0
:m35fd_search_loop2
add j, 1
hwq j
ife a, m35fd_id_a
ife b, m35fd_id_b
add z, 1
ifn j, i
set pc, m35fd_search_loop2
set a, z
set ex, pop
set z, pop
set y, pop
set x, pop
set j, pop
set i, pop
set c, pop
set b, pop
set pc, pop

:m35fd_int_set
set push, a
set push, b
set push, x
set a, 1
set x, m35fd_int_manager
hwi [disk_drive_hwi]
set a, 0
hwi [disk_drive_hwi]
set [m35fd_state], a
set [m35fd_error], b
set x, pop
set b, pop
set a, pop
set pc, pop

:m35fd_int_unset
set push, a
set push, x
set a, 1
set x, 0
hwi [disk_drive_hwi]
set x, pop
set a, pop
set pc, pop

:m35fd_int_manager;This must never be called by anything other than the interrupt manager
set push, a
set push, b
set a, 0
hwi [disk_drive_hwi]
set [m35fd_state], a
set [m35fd_error], b
ife [m35fd_state], 0
jsr close_header
set b, pop
set a, pop
set pc, pop
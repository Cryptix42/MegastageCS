; *************************
; Project: MegastageCS
; File: Display.mgr.dasm
; *************************

:update_screen
set push, a
set push, b
set push, c
set push, i
ife [double_buffer_state], 0
set a, VRAM
ife [double_buffer_state], 1
set a, VRAM2
set c, vram_size

ife [page], 0
set b, screen_map1
ife [page], 1
set b, screen_map2
ife [page], 2
set b, screen_map3
ife [page], 3
set b, screen_map4
ife [page], 4
set b, screen_map5
ife [page], 6
set b, screen_map7
ifn [page], 5
jsr memory_copy

ife [page], 1
jsr update_orbital_data
ife [page], 2 
jsr update_times_data
ife [page], 3 
jsr update_pps_data
ife [page], 4 
jsr update_target_data
ife [page], 5
jsr update_keybind_data
ife [page], 6
jsr update_hardware_data

set b, text_color
jsr memory_bor
set a, 0
jsr lem1802_select
ife [double_buffer_state], 0
set b, VRAM
ife [double_buffer_state], 1
set b, VRAM2
jsr lem1802_map_VRAM
xor [double_buffer_state], 1
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop
;======================================Hardware==============================================
:update_hardware_data
set push, a
set push, b
set push, c
set push, i
set push, j
set push, x
set push, y
set push, z
set push, ex
hwn i
sub i, 1
set j, 0xffff
add j, [hardware_scroll]
set [hardware_list_var2], j
add [hardware_list_var2], 8
ife [double_buffer_state], 0
set [hardware_list_var], VRAM+32
ife [double_buffer_state], 1
set [hardware_list_var], VRAM2+32

:hardware_search_loop
add [hardware_list_var], 32
add j, 1
set a, 0
set b, 0
set z, 0xffff
hwq j
ife a, keyboard_id_a 
ife b, keyboard_id_b 
set z, 0
ife a, lem1802_id_a 
ife b, lem1802_id_b 
set z, 1
ife a, clock_id_a 
ife b, clock_id_b 
set z, 2
ife a, s8md_id_a 
ife b, s8md_id_b 
set z, 3
ife a, xlcmg_id_a 
ife b, xlcmg_id_b 
set z, 4
ife a, hta90_id_a 
ife b, hta90_id_b 
set z, 5
ife a, pps_id_a 
ife b, pps_id_b 
set z, 6
ife a, ffa_id_a 
ife b, ffa_id_b 
set z, 7
ife a, tlw16_id_a 
ife b, tlw16_id_b 
set z, 8
ifn a, 0
ifn b, 0
ife z, 0xffff
set z, 9
ife a, ncc_id_a 
ife b, ncc_id_b 
set z, 10
ife a, uwtm_id_a 
ife b, uwtm_id_b 
set z, 11
ife a, eivd_id_a 
ife b, eivd_id_b 
set z, 12
ife a, ucpu_id_a 
ife b, ucpu_id_b 
set z, 13
ifn z, 0xffff
jsr hardware_data_print
ifn j, i
ifn j, [hardware_list_var2]
set pc, hardware_search_loop

set a, [hardware_scroll]
ife [double_buffer_state], 0
set c, VRAM+91
ife [double_buffer_state], 1
set c, VRAM2+91
jsr word_tostring
set ex, pop
set z, pop
set y, pop
set x, pop
set j, pop
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop
:hardware_data_print
set push, a
set push, b
ife z, 9
set pc, unknown_hardware_data_print
set a, [hardware_list_var]
set b, z
mul b, 8
add b, hardware_names_list
set c, 7
jsr memory_copy

ife z, 3
jsr s8md_hardware_status_print
ife z, 4
jsr xlcmg_hardware_status_print
ife z, 8
jsr tlw16_hardware_status_print
set b, pop
set a, pop
set pc, pop
:s8md_hardware_status_print
set [s8md], j
jsr s8md_get_status
add a, 12
set push, a
set a, b
set b, c
set c, pop
jsr word_tostring
add c, 8
set a, b
jsr word_tostring
set pc, pop
:xlcmg_hardware_status_print
set [xlcmg], j
jsr xlcmg_get_status
add a, 12
set push, a
set a, b
set b, c
set c, pop
jsr word_tostring
add c, 8
set a, b
jsr word_tostring
set pc, pop
:tlw16_hardware_status_print
set [tlw16], j
jsr tlw16_get_status
add a, 12
set push, a
set a, b
set b, c
set c, pop
jsr word_tostring
add c, 8
set a, b
jsr word_tostring
set pc, pop
:unknown_hardware_data_print
set c, [hardware_list_var]
set push, a
set a, b
set b, pop
jsr dword_to_hexstring
set b, pop
set a, pop
set pc, pop
;======================================Keybind==============================================
:update_keybind_data
set push, i
set push, j
set push, c
set c, screen_map6
set i, 0xffff
set j, keybind_selection_end
add j, 1
mul j, 32
add j, screen_map6

:update_keybind_data_loop
add c, 32
add i, 1
set [c], [keybindings+i]
ifn c, j
set pc, update_keybind_data_loop

ife [double_buffer_state], 0
set a, VRAM
ife [double_buffer_state], 1
set a, VRAM2
set c, vram_size
set b, [keybind_scroll]
mul b, 32
add b, screen_map6
jsr memory_copy
set c, pop
set j, pop
set i, pop
set pc, pop
;======================================OrbitElements==============================================
:update_orbital_data
set push, a
set push, b
set push, c
set a, 0
jsr ffa_select
jsr ncc_select
jsr ffa_get_soi
set c, vector_dump
jsr ffa_orbital_state_vector
set b, vector_dump
set c, ncc_dump
jsr ncc_get_orbital_elements
set a, [ncc_dump]
set b, [ncc_dump+1]
ife [double_buffer_state], 0
set c, VRAM+32
ife [double_buffer_state], 1
set c, VRAM2+32
jsr dword_tostring
set a, [ncc_dump+2]
set b, [ncc_dump+3]
add c, 32
jsr dword_tostring
set a, [ncc_dump+4]
add c, 32
jsr word_tostring
set a, [ncc_dump+5]
add c, 32
jsr angle_tostring
set a, [ncc_dump+6]
add c, 32
jsr angle_tostring
jsr ffa_get_soi
set c, ffa_dump
jsr ffa_field_data
set a, [ffa_dump]
set b, [ffa_dump+1]
ife [double_buffer_state], 0
set c, VRAM+256
ife [double_buffer_state], 1
set c, VRAM2+256
jsr float_tostring
set a, [ffa_dump+2]
add c, 32
jsr angle_tostring
set a, [ffa_dump+3]
add c, 32
jsr angle_tostring
set c, pop
set b, pop
set a, pop
set pc, pop
;======================================OrbitETAs==============================================
:update_times_data
set push, a
set push, b
set push, c
set a, 0
jsr ffa_select
jsr ncc_select
jsr ffa_get_soi
set c, vector_dump
jsr ffa_orbital_state_vector
set b, vector_dump
set c, ncc_dump
jsr ncc_get_times
set a, [ncc_dump]
set b, [ncc_dump+1]
ife [double_buffer_state], 0
set c, VRAM+32
ife [double_buffer_state], 1
set c, VRAM2+32
jsr dword_tostring
set a, [ncc_dump+2]
set b, [ncc_dump+3]
add c, 32
jsr dword_tostring
set a, [ncc_dump+4]
set b, [ncc_dump+5]
add c, 32
jsr dword_tostring
set a, [ncc_dump+6]
set b, [ncc_dump+7]
add c, 32
jsr dword_tostring
set a, [ncc_dump+8]
set b, [ncc_dump+9]
add c, 32
jsr dword_tostring
set a, [ncc_dump+10]
set b, [ncc_dump+11]
add c, 32
jsr dword_tostring
set a, [ncc_dump+12]
set b, [ncc_dump+13]
add c, 32
jsr dword_tostring
set c, pop
set b, pop
set a, pop
set pc, pop
;======================================Target==============================================
:update_target_data
set push, a
set push, b
set push, c
set a, 0
jsr ncc_select
jsr hta90_select
jsr ffa_select

set c, [target_index]
set b, hta_signature_dump
jsr hta90_get_signatures
set b, [hta_signature_dump+c]
set [target], b

ife [double_buffer_state], 0
set c, VRAM+16
ife [double_buffer_state], 1
set c, VRAM2+16
set a, [target_index]
jsr byte_tostring

jsr ffa_get_soi
set c, vector_dump
jsr ffa_orbital_state_vector

set push, c
set c, 0
set b, [target]
jsr hta90_set_target
ife c, 0
set pc, update_target_data_skp
set c, pop

set push, c
set b, hta_vector_dump
jsr hta90_get_vector
set c, pop

set push, c
set b, hta_data_dump
jsr hta90_get_target_data
set c, pop

set b, vector_dump
jsr ncc_compare_orbits
ife [double_buffer_state], 0
set c, VRAM+192
ife [double_buffer_state], 1
set c, VRAM2+192
jsr angle_tostring
set a, b
ife [double_buffer_state], 0
set c, VRAM+160
ife [double_buffer_state], 1
set c, VRAM2+160
jsr angle_tostring

set b, vector_dump
set c, ncc_dump
jsr ncc_get_orbital_elements
set a, [ncc_dump]
set b, [ncc_dump+1]
ife [double_buffer_state], 0
set c, VRAM+224
ife [double_buffer_state], 1
set c, VRAM2+224
jsr dword_tostring
set a, [ncc_dump+2]
set b, [ncc_dump+3]
ife [double_buffer_state], 0
set c, VRAM+256
ife [double_buffer_state], 1
set c, VRAM2+256
jsr dword_tostring

set a, [hta_data_dump]
ife [double_buffer_state], 0
set c, VRAM+288
ife [double_buffer_state], 1
set c, VRAM2+288
jsr word_tostring
set a, [hta_data_dump+1]
set b, [hta_data_dump+2]
ife [double_buffer_state], 0
set c, VRAM+32
ife [double_buffer_state], 1
set c, VRAM2+32
jsr dword_tostring
set a, [hta_data_dump+3]
set b, [hta_data_dump+4]
add c, 32
jsr dword_tostring
set a, [hta_data_dump+5]
add c, 32
jsr angle_tostring
set a, [hta_data_dump+6]
add c, 32
jsr angle_tostring

set c, pop
set b, pop
set a, pop
set pc, pop
:update_target_data_skp
ife [double_buffer_state], 0
set c, VRAM+32
ife [double_buffer_state], 1
set c, VRAM2+32
set b, 0xffff
set a, 0xffff
jsr dword_tostring
add c, 32
jsr dword_tostring
add c, 32
jsr angle_tostring
add c, 32
jsr angle_tostring
add c, 32
jsr angle_tostring
add c, 32
jsr angle_tostring
add c, 32
jsr dword_tostring
add c, 32
jsr dword_tostring
add c, 32
jsr word_tostring
set c, pop
set c, pop
set b, pop
set a, pop
set pc, pop
;======================================PPS==============================================
:update_pps_data
set push, a
set push, b
set push, c
set a, 0
jsr pps_select
set b, 0xffff
jsr pps_get_sector
set a, b
ife [double_buffer_state], 0
set c, VRAM+32
ife [double_buffer_state], 1
set c, VRAM2+32
jsr word_tostring
set b, pps_dump
jsr pps_get_coords
set a, [pps_dump]
set b, [pps_dump+1]
add c, 64
jsr dword_tostring
set a, [pps_dump+2]
set b, [pps_dump+3]
add c, 32
jsr dword_tostring
set a, [pps_dump+4]
set b, [pps_dump+5]
add c, 32
jsr dword_tostring
set c, pop
set b, pop
set a, pop
set pc, pop

;these functions convert a word (or words) from register A (and B in the case of a dword), to an ASCII string starting at C.
;All credits for byte_tostring, word_tostring, and dword_tostring go to StillNoNumber 
;(http://www.0x10cforum.com/profile/2236555) formerly known as NaNDummy.
;==============
:angle_tostring ;returns a 7 char string witha sign "-" or " ", degrees "00000", a space, and minutes "000".
set push, ex
set push, a
set push, c
set push, i
set push, j
set i, a
set j, a
and j, 0b0000000000111111
and i, 0b0111111111000000
shr i, 6
ifg a, 0x7fff
set [c], [angle_tostring_const1]
ifl a, 0x8000
set [c], key_space
add c, 1
set a, i
jsr word_tostring
add c, 6
set a, j
jsr byte_tostring
set i, pop
set j, pop
set c, pop
set a, pop
set ex, pop
set pc, pop

:byte_tostring ;A=number, C=start of ram to write to
;preparation
AND A, 0x00ff
SET [C], A
SET [C+1], A
SET [C+2], A
;last digit
MOD [C+2], 10
;fourth digit
DIV [C+1], 10
MOD [C+1], 10
;third digit
DIV [C], 100
MOD [C], 10
BOR [C], 0x0030
BOR [C+1], 0x0030
BOR [C+2], 0x0030
SET PC, POP

:word_tostring ;A=number, C=start of ram to write to
;preparation
SET [C], A
SET [C+1], A
SET [C+2], A
SET [C+3], A
SET [C+4], A
;last digit
MOD [C+4], 10
;fourth digit
DIV [C+3], 10
MOD [C+3], 10
;third digit
DIV [C+2], 100
MOD [C+2], 10
;second digit
DIV [C+1], 1000
MOD [C+1], 10
;first digit
DIV [C], 10000
MOD [C], 10
BOR [C], 0x0030
BOR [C+1], 0x0030
BOR [C+2], 0x0030
BOR [C+3], 0x0030
BOR [C+4], 0x0030
SET PC, POP

:dword_tostring ;C=start of ram to write to, A=high digits, B=low digits
set push, a
set push, b
set push, c
set push, i
set push, j
set push, x
set push, y
set push, z
set push, ex
set x, a
set y, b
set j, c
set a, 0
set b, 0
set c, 0
SET I, 10
ADD J, 10
:dword_tostring_loop
STD [variable1], X
SET [variable2], Y
JSR secondCode
SET [J], Y
SET X, [variable1]
SET Y, [variable2]
JSR div10
IFN I, 0
SET PC, dword_tostring_loop
BOR [J], 0x0030
BOR [J+1], 0x0030
BOR [J+2], 0x0030
BOR [J+3], 0x0030
BOR [J+4], 0x0030
BOR [J+5], 0x0030
BOR [J+6], 0x0030
BOR [J+7], 0x0030
BOR [J+8], 0x0030
BOR [J+9], 0x0030
set ex, pop
set z, pop
set y, pop
set x, pop
set j, pop
set i, pop
set c, pop
set b, pop
set a, pop
SET PC, POP
:secondCode
MOD Y, 10
MOD X, 10
MUL X, 6
ADD Y, X
MOD Y, 10
SET PC, POP
:div10
SET A, X
SET Z, Y
MOD A, 10
MOD Z, 10
SET B, A
MUL B, 6
ADD Z, B
DIV Z, 10
MUL A, 6553
DIV X, 10
DIV Y, 10
ADD Y, A
ADD Y, Z
SET PC, POP

:float_tostring ;like a dword but the string is in scientific notation. (a<<16)+b = ieee754 single accuracy float UNFINISHED!
set push, a
set push, c
set push, b
set push, i
set i, a
and i, 0b0000000001111111
and a, 0b1111111110000000
ifg a, 0x7fff
set [c], [angle_tostring_const1]
ifl a, 0x8000
set [c], key_space
and a, 0b0111111110000000
set b, a
set a, i
jsr dword_tostring
add c, 8
set [c], [float_tostring_const1]
add c, 1
set a, b
shr a, 7
jsr byte_tostring
set i, pop
set b, pop
set c, pop
set a, pop
set pc, pop

:dword_to_hexstring
set push, a
set push, b
set push, c

set [c], a
and [c], 0xf000
shr [c], 12
add [c], 0x0030
ifg [c], 0x0039
add [c], 0x0027

set [c+1], a
and [c+1], 0x0f00
shr [c+1], 8
add [c+1], 0x0030
ifg [c+1], 0x0039
add [c+1], 0x0027

set [c+2], a
and [c+2], 0x00f0
shr [c+2], 4
add [c+2], 0x0030
ifg [c+2], 0x0039
add [c+2], 0x0027

set [c+3], a
and [c+3], 0x000f
add [c+3], 0x0030
ifg [c+3], 0x0039
add [c+3], 0x0027

set [c+4], b
and [c+4], 0xf000
shr [c+4], 12
add [c+4], 0x0030
ifg [c+4], 0x0039
add [c+4], 0x0027

set [c+5], b
and [c+5], 0x0f00
shr [c+5], 8
add [c+5], 0x0030
ifg [c+5], 0x0039
add [c+5], 0x0027

set [c+6], b
and [c+6], 0x00f0
shr [c+6], 4
add [c+6], 0x0030
ifg [c+6], 0x0039
add [c+6], 0x0027

set [c+7], b
and [c+7], 0x000f
add [c+7], 0x0030
ifg [c+7], 0x0039
add [c+7], 0x0027

set c, pop
set b, pop
set a, pop
set pc, pop
;==============Display Data==================
.define vram_size 384
.define text_color 0x7000
.define end_page 6
.define keybind_selection_end 18
:vector_dump
dat 0, 0, 0, 0
dat 0, 0, 0, 0
dat 0, 0, 0, 0
:hta_vector_dump
dat 0, 0, 0, 0
dat 0, 0, 0, 0
dat 0, 0, 0, 0
:ncc_dump
dat 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
:ffa_dump
dat 0, 0, 0, 0, 0, 0
:pps_dump
dat 0, 0, 0, 0, 0, 0, 0, 0
:hta_signature_dump
dat 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
:hta_data_dump
dat 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
:angle_tostring_const1 dat "-"
:float_tostring_const1 dat "^"
:hardware_list_var dat 0
:hardware_list_var2 dat 0
:target dat 0
:target_index dat 0
:page dat 0
:variable1 DAT 0
:variable2 DAT 0
:double_buffer_state dat 0

:hardware_names_list
dat "Keyboard"
dat "LEM1802 "
dat "Clock   "
dat "S8MD    "
dat "XLCMG   "
dat "HTA-90  "
dat "PPS     "
dat "FFA     "
dat "TLW-16  "
dat "unknown "
dat "NCC-1701"
dat "8k-UWTM "
dat "EIVD-16 "
dat "UCPU    "

:VRAM
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "        Initializing...         "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat 0, 0, 0, 0, 0, 0, 0, 0

:VRAM2
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "        Initializing...         "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat 0, 0, 0, 0, 0, 0, 0, 0

:screen_map1
dat "==== MegastageCS v0.5 Indev ===="
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "     Interface Controls:        "
dat "   U/D arrow keys - selecting   "
dat "   L/R arrow keys - paging      "
dat "            Page 1/7 >          "
dat 0
:screen_map2
dat "=========Orbital info==========="
dat "0000000000 :apoapsis (100m)     " 
dat "0000000000 :periapse (100m)     "
dat "00000    :eccentricity (1000ths)"
dat "-00000 000 :inclination         "
dat "-00000 000 :argument of periapse"
dat "======Gravity field data========"
dat "Gravitational Parameter (kg):   "
dat "-0000000^000                    "
dat "-00000 000 :directional pitch   "
dat "-00000 000 :directional yaw     "
dat "          < Page 2/7 >          "
dat 0
:screen_map3
dat "=========Orbital ETAs==========="
dat "0000000000 :sec. till apoapsis  "
dat "0000000000 :sec. till periapse  "
dat "0000000000 :sec. till asc. node "
dat "0000000000 :sec. till des. node "
dat "0000000000 :sec. Orbital Period "
dat "0000000000 :m/s  Orbital Speed  "
dat "0000000000 :m/s^2 Acceleration  "
dat "                                "
dat "                                "
dat "                                "
dat "          < Page 3/7 >          "
dat 0
:screen_map4
dat "=========PPS navigation========="
dat "00000 :sector number            "
dat "                                "
dat "0000000000 :X coordinate (100m) "
dat "0000000000 :Y coordinate (100m) "
dat "0000000000 :Z coordinate (100m) "
dat "                                "
dat "32768=unknown sector            "
dat "32769=no pulsars detected       "
dat "32770=malfunction               "
dat "                                "
dat "          < Page 4/7 >          "
dat 0
:screen_map5
dat "=========Target 000 info========"
dat "0000000000 :rough mass (kg)     "
dat "0000000000 :distance (m)        "
dat "-00000 000 :directional pitch   "
dat "-00000 000 :directional yaw     "
dat "-00000 000 :argument of periapse"
dat "-00000 000 :relative inclination"
dat "0000000000 :apoapsis (100m)     "
dat "0000000000 :periapse (100m)     "
dat "00000     :object type          "
dat " 0=unknown 1=natural 2=manmade  "
dat "          < Page 5/7 >          "
dat 0
:screen_map6
dat "=========Key-bindings==========="
dat "w", 0x1f, ":pitch +                      "
dat "s :pitch -                      "
dat "d :yaw >                        "
dat "a :yaw <                        "
dat "e :roll Ov                      "
dat "q :roll vO                      "
dat "r :throttle z+                  "
dat "f :throttle z-                  "
dat "x :throttle cut                 "
dat "1 :primary weapon               "
dat "2 :secondary weapon             "
dat "c :credits                      "
dat "  :unused                       "
dat "  :unused                       "
dat "  :unused                       "
dat "  :unused                       "
dat "  :unused                       "
dat "  :unused                       "
dat "  :unused                       "
dat "          < Page 6/7 >          "
dat 0
:keybind_scroll dat 0
:keybind_selection dat 0
:screen_map7
dat "===========Hardware============="
dat "Name        Status  Error Device"
dat "--------    -----   ----- <00000"
dat "--------    -----   -----       "
dat "--------    -----   -----       "
dat "--------    -----   -----       "
dat "--------    -----   -----       "
dat "--------    -----   -----       "
dat "--------    -----   -----       "
dat "--------    -----   -----       "
dat "                                "
dat "          < Page 7/7            "
dat 0
:hardware_scroll dat 0
:screen_credits
dat "===========Credits=============="
dat "Cryptix Harbinger: Creator of   "
dat "MegastageCS & Ender Innovations "
dat "Orlof: Megastage                "
dat "StillNoNumber: some useful code "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "  press credits button to exit  "
dat 0
:screen_maps_end dat 0
; *************************
; Project: MegastageCS
; File: MegastageCS.main.dasm
; *************************
:init
ias interrupt_manager
jsr gyro_assigner
jsr engine_assigner
jsr weapon_manager_init
jsr keyboard_select
jsr clock_select

ife [double_buffer_state], 0
set a, VRAM
ife [double_buffer_state], 1
set a, VRAM2
set c, vram_size
set b, text_color
jsr memory_bor
set b, 60
jsr clock_tick_set
set a, 1
jsr clock_int_set
jsr update_screen
set a, 0
set b, 0
set c, 0
;============================End of init======================================
:key_control_loop
jsr keyboard_read_buffer
ife c, 0
set pc, key_control_loop
ife c, key_arrow_right
jsr page_right
ife c, key_arrow_left
jsr page_left
ife [page], 5
set pc, keybind_key_loop
;============================Main controls====================================
ife c, [key_pitch_up]
jsr pitch_up
ife c, [key_pitch_down]
jsr pitch_down
ife c, [key_yaw_left]
jsr yaw_left
ife c, [key_yaw_right]
jsr yaw_right
ife c, [key_roll_counterwise]
jsr roll_counterwise
ife c, [key_roll_clockwise]
jsr roll_clockwise
ife c, [key_throttle_cut]
jsr kill_throttle
ife c, [key_throttle_up]
jsr throttle_up
ife c, [key_throttle_down]
jsr throttle_down
ife c, [key_primary_weapon] 
jsr fire_primary
ife c, [key_secondary_weapon] 
jsr fire_secondary
ife c, [key_credits]
jsr credits_page

ife [page], 4
set pc, target_key_loop
ife [page], 6
set pc, hwmanager_key_loop
set pc, key_control_loop
;================================Page exclusive loop controls==============================
:keybind_key_loop
ifg c, 0x2b
ifl c, 0x7c
jsr keybind_selection_set
ife c, key_arrow_up
jsr keybind_selection_up
ife c, key_arrow_down
jsr keybind_selection_down
ife c, key_control
jsr keybind_restore_default
set pc, key_control_loop

:hwmanager_key_loop
ife c, key_enter
jsr hardware_selection_set
ife c, key_arrow_up
jsr hardware_selection_up
ife c, key_arrow_down
jsr hardware_selection_down
set pc, key_control_loop

:target_key_loop
ife c, key_arrow_up
jsr target_selection_up
ife c, key_arrow_down
jsr target_selection_down
set pc, key_control_loop
;=====================================End of loop==========================================
:hardware_selection_down
add [hardware_scroll], 1
jsr update_screen
set pc, pop

:hardware_selection_up
sub [hardware_scroll], 1
jsr update_screen
set pc, pop

:hardware_selection_set

set pc, pop

:keybind_restore_default
set push, a
set push, b
set push, c
set a, keybindings
set b, default_keybindings_copy
set c, 20
jsr memory_copy
set c, pop
set b, pop
set a, pop
jsr update_screen
set pc, pop

:keybind_selection_set
set push, i
set i, [keybind_selection]
set [keybindings+i], c
jsr update_screen
set i, pop
set pc, pop

:keybind_selection_up
set push, i
set i, [keybind_selection]
mul i, 32
add i, 33
set [screen_map6+i], key_space
ifn [keybind_selection], 0
sub [keybind_selection], 1
ifl [keybind_selection], [keybind_scroll]
sub [keybind_scroll], 1
set i, [keybind_selection]
mul i, 32
add i, 33
set [screen_map6+i], 0x1f
set i, pop
jsr update_screen
set pc, pop

:keybind_selection_down
set push, i
set i, [keybind_selection]
mul i, 32
add i, 33
set [screen_map6+i], key_space
ifn [keybind_selection], keybind_selection_end
add [keybind_selection], 1
set i, [keybind_scroll]
add i, 10
ife [keybind_selection], i
add [keybind_scroll], 1
set i, [keybind_selection]
mul i, 32
add i, 33
set [screen_map6+i], 0x1f
set i, pop
jsr update_screen
set pc, pop

:target_selection_up
set push, b
set push, c
set a, 0
jsr hta90_select
add [target_index], 1
and [target_index], 0x000f
set c, [target_index]
set b, hta_signature_dump
jsr hta90_get_signatures
set b, [hta_signature_dump+c]
set [target], b
jsr update_screen
set c, pop
set b, pop
set pc, pop

:target_selection_down
set push, a
set push, b
set push, c
set a, 0
jsr hta90_select
sub [target_index], 1
and [target_index], 0x000f
jsr update_screen
set c, pop
set b, pop
set a, pop
set pc, pop

:page_right
ifn [page], end_page
add [page], 1
jsr update_screen
set pc, pop

:page_left
ifn [page], 0
sub [page], 1
jsr update_screen
set pc, pop

:credits_page
set push, a
set push, b
set push, c
set push, i
set a, VRAM
set c, vram_size
set b, screen_credits
jsr memory_copy
set b, text_color
jsr memory_bor
ife [credits_bool], 0
set pc, credit_bool_check_skp
jsr update_screen
set [credits_bool], 0
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop
:credit_bool_check_skp
set [credits_bool], 1
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop
:credits_bool dat 0

:fire_primary
jsr lasers_fire
set pc, pop

:fire_secondary

set pc, pop

:pitch_up
set push, a
set push, b
set a, [gyro_x_index]
jsr xlcmg_select
ife [gyro_x_torque], 0
set [gyro_x_torque], 50000
ife [gyro_x_torque], -50000
set [gyro_x_torque], 0
set b, [gyro_x_torque]
jsr xlcmg_set_torque_level
set b, pop
set a, pop
set pc, pop

:pitch_down
set push, a
set push, b
set a, [gyro_x_index]
jsr xlcmg_select
ife [gyro_x_torque], 0
set [gyro_x_torque], -50000
ife [gyro_x_torque], 50000
set [gyro_x_torque], 0
set b, [gyro_x_torque]
jsr xlcmg_set_torque_level
set b, pop
set a, pop
set pc, pop

:yaw_left
set push, a
set push, b
set a, [gyro_y_index]
jsr xlcmg_select
ife [gyro_y_torque], 0
set [gyro_y_torque], -50000
ife [gyro_y_torque], 50000
set [gyro_y_torque], 0
set b, [gyro_y_torque]
jsr xlcmg_set_torque_level
set b, pop
set a, pop
set pc, pop

:yaw_right
set push, a
set push, b
set a, [gyro_y_index]
jsr xlcmg_select
ife [gyro_y_torque], 0
set [gyro_y_torque], 50000
ife [gyro_y_torque], -50000
set [gyro_y_torque], 0
set b, [gyro_y_torque]
jsr xlcmg_set_torque_level
set b, pop
set a, pop
set pc, pop

:roll_counterwise
set push, a
set push, b
set a, [gyro_z_index]
jsr xlcmg_select
ife [gyro_z_torque], 0
set [gyro_z_torque], 50000
ife [gyro_z_torque], -50000
set [gyro_z_torque], 0
set b, [gyro_z_torque]
jsr xlcmg_set_torque_level
set b, pop
set a, pop
set pc, pop

:roll_clockwise
set push, a
set push, b
set a, [gyro_z_index]
jsr xlcmg_select
ife [gyro_z_torque], 0
set [gyro_z_torque], -50000
ife [gyro_z_torque], 50000
set [gyro_z_torque], 0
set b, [gyro_z_torque]
jsr xlcmg_set_torque_level
set b, pop
set a, pop
set pc, pop

:throttle_down
;set a, [s8md_forward_index]
;jsr s8md_select
;ifg [s8md_forward_power], 0
;sub [s8md_forward_power], 10000
;set b, [s8md_forward_power]
;jsr s8md_set_power
set push, a
set push, b
set a, 0b0000000000001001
set b, 0
jsr engines_fire
set b, pop
set a, pop
set pc, pop

:throttle_up
;set a, [s8md_forward_index]
;jsr s8md_select
;ifl [s8md_forward_power], 60000
;add [s8md_forward_power], 10000
;set b, [s8md_forward_power]
;jsr s8md_set_power
set push, a
set push, b
set a, 0b0000000000001001
set b, 60000
jsr engines_fire
set b, pop
set a, pop
set pc, pop

:kill_throttle
set a, [s8md_forward_index]
jsr s8md_select
set [s8md_forward_power], 0
set b, [s8md_forward_power]
jsr s8md_set_power
set pc, pop

:pause
set a, 0
set pc, pause

:end
set pc, end

;===========================================Imports===============================================
.include Drivers\Megastage Drivers\8k-UWTM.drv.dasm
.include Drivers\Megastage Drivers\Battery.drv.dasm
.include Drivers\Megastage Drivers\EIVD-16.drv.dasm
.include Drivers\Megastage Drivers\FFA.drv.dasm
.include Drivers\Megastage Drivers\Generator.drv.dasm
.include Drivers\Megastage Drivers\HTA-90.drv.dasm
.include Drivers\Megastage Drivers\NCC-1701.drv.dasm
.include Drivers\Megastage Drivers\PPS.drv.dasm
.include Drivers\Megastage Drivers\S8MD.drv.dasm
.include Drivers\Megastage Drivers\Shield.drv.dasm
.include Drivers\Megastage Drivers\TLW-16.drv.dasm
.include Drivers\Megastage Drivers\UCPU.drv.dasm
.include Drivers\Megastage Drivers\XLCMG.drv.dasm
.include Drivers\Standard Drivers\Clock.drv.dasm
.include Drivers\Standard Drivers\Keyboard.drv.dasm
.include Drivers\Standard Drivers\LEM1802.drv.dasm
.include Drivers\Standard Drivers\M35FDFileDriver.drv.dasm
.include Libraries\Utility.lib.dasm
.include Managers\Display.mgr.dasm
.include Managers\Error.mgr.dasm
.include Managers\Flight.mgr.dasm
.include Managers\Interrupt.mgr.dasm
.include Managers\Weapon.mgr.dasm

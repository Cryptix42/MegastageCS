; *************************
; Project: MegastageCS
; File: MegastageCS.main.dasm
; *************************
:init
ias interrupt_manager
set a, 0
jsr init_screen
set a, VRAM
set c, vram_size
set b, text_color
jsr memory_bor
set a, 0
set b, 0
set c, 0
jsr xlcmg_assigner
jsr s8md_assigner
jsr update_screen
jsr keyboard_select
jsr clock_select
set b, 60
jsr clock_tick_set
set a, 1
jsr clock_int_set
:key_control_loop
jsr keyboard_read_buffer
ife c, 0
set pc, key_control_loop
ife c, key_arrow_right
jsr page_right
ife c, key_arrow_left
jsr page_left
ife c, key_space;depricate this at next update
jsr update_screen
ife c, key_w
jsr w_pitch
ife c, key_s
jsr s_pitch
ife c, key_a
jsr a_yaw
ife c, key_d
jsr d_yaw
ife c, key_q
jsr q_roll
ife c, key_e
jsr e_roll
ife c, key_x
jsr x_kill_throttle
ife c, key_r
jsr r_throttle
ife c, key_f
jsr f_throttle
ife [page], 4
set pc, target_key_loop
set pc, key_control_loop
:target_key_loop
ife c, key_arrow_up
jsr target_selection_up
ife c, key_arrow_down
jsr target_selection_down
set pc, key_control_loop

:target_selection_up
set push, b
set push, c
set a, 0
jsr hta90_select
add [target_index], 1
and [target_index], 0x000f
set c, [target_index]
set b, hta_signature_dump
jsr hta90_get_signatures
set b, [hta_signature_dump+c]
set [target], b
jsr update_screen
set c, pop
set b, pop
set pc, pop

:target_selection_down
set push, a
set push, b
set push, c
set a, 0
jsr hta90_select
sub [target_index], 1
and [target_index], 0x000f
jsr update_screen
set c, pop
set b, pop
set a, pop
set pc, pop

:page_right
ifn [page], end_page
add [page], 1
jsr update_screen
set pc, pop

:page_left
ifn [page], 0
sub [page], 1
jsr update_screen
set pc, pop

:x_kill_throttle
set push, a
set push, b
set a, [s8md_forward_index]
jsr s8md_select
set [s8md_forward_power], 0
set b, [s8md_forward_power]
jsr s8md_set_power
set b, pop
set a, pop
set pc, pop

:w_pitch
set push, a
set push, b
set a, [gyro_x_index]
jsr xlcmg_select
ife [gyro_x_torque], 0
set [gyro_x_torque], 50000
ife [gyro_x_torque], -50000
set [gyro_x_torque], 0
set b, [gyro_x_torque]
jsr xlcmg_set_torque_level
set b, pop
set a, pop
set pc, pop

:s_pitch
set push, a
set push, b
set a, [gyro_x_index]
jsr xlcmg_select
ife [gyro_x_torque], 0
set [gyro_x_torque], -50000
ife [gyro_x_torque], 50000
set [gyro_x_torque], 0
set b, [gyro_x_torque]
jsr xlcmg_set_torque_level
set b, pop
set a, pop
set pc, pop

:a_yaw
set push, a
set push, b
set a, [gyro_y_index]
jsr xlcmg_select
ife [gyro_y_torque], 0
set [gyro_y_torque], -50000
ife [gyro_y_torque], 50000
set [gyro_y_torque], 0
set b, [gyro_y_torque]
jsr xlcmg_set_torque_level
set b, pop
set a, pop
set pc, pop

:d_yaw
set push, a
set push, b
set a, [gyro_y_index]
jsr xlcmg_select
ife [gyro_y_torque], 0
set [gyro_y_torque], 50000
ife [gyro_y_torque], -50000
set [gyro_y_torque], 0
set b, [gyro_y_torque]
jsr xlcmg_set_torque_level
set b, pop
set a, pop
set pc, pop

:q_roll
set push, a
set push, b
set a, [gyro_z_index]
jsr xlcmg_select
ife [gyro_z_torque], 0
set [gyro_z_torque], 50000
ife [gyro_z_torque], -50000
set [gyro_z_torque], 0
set b, [gyro_z_torque]
jsr xlcmg_set_torque_level
set b, pop
set a, pop
set pc, pop

:e_roll
set push, a
set push, b
set a, [gyro_z_index]
jsr xlcmg_select
ife [gyro_z_torque], 0
set [gyro_z_torque], -50000
ife [gyro_z_torque], 50000
set [gyro_z_torque], 0
set b, [gyro_z_torque]
jsr xlcmg_set_torque_level
set b, pop
set a, pop
set pc, pop

:f_throttle
set a, [s8md_forward_index]
jsr s8md_select
ifg [s8md_forward_power], 1000
sub [s8md_forward_power], 10000
set b, [s8md_forward_power]
jsr s8md_set_power
set pc, pop

:r_throttle
set a, [s8md_forward_index]
jsr s8md_select
ifl [s8md_forward_power], 60000
add [s8md_forward_power], 10000
set b, [s8md_forward_power]
jsr s8md_set_power
set pc, pop

:pause
set a, 0
set pc, pause

:end
set pc, end

.include HWdrivers\Clock.drv.dasm
.include HWdrivers\FFA.drv.dasm
.include HWdrivers\HTA-90.drv.dasm
.include HWdrivers\Keyboard.drv.dasm
.include HWdrivers\LEM1802.drv.dasm
;.include HWdrivers\M35FD.drv.dasm ====== NOT YET
.include HWdrivers\NCC-1701.drv.dasm
.include HWdrivers\PPS.drv.dasm
.include HWdrivers\S8MD.drv.dasm
.include HWdrivers\XLCMG.drv.dasm
.include Libraries\Display.lib.dasm
.include Libraries\Utility.lib.dasm
.include Managers\Error.mgr.dasm
.include Managers\Interrupt.mgr.dasm
.include Data\CONST.dat.dasm
.include Data\ALLOC.dat.dasm

;code junkyard
;ife c, key_1
;jsr target_selection
;ife c, key_2
;jsr target_selection
;ife c, key_3
;jsr target_selection
;ife c, key_4
;jsr target_selection
;ife c, key_5
;jsr target_selection
;ife c, key_6
;jsr target_selection
;ife c, key_7
;jsr target_selection
;ife c, key_8
;jsr target_selection
;ife c, key_9
;jsr target_selection
;ife c, key_a
;jsr target_selection
;ife c, key_b
;jsr target_selection
;ife c, key_c
;jsr target_selection
;ife c, key_d
;jsr target_selection
;ife c, key_e
;jsr target_selection
;ife c, key_f
;jsr target_selection
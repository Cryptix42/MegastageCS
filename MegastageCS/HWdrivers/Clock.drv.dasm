; *************************
; Project: MegastageCS
; File: Clock.drv.dasm
; *************************
.define clock_id_a 0xb402
.define clock_id_b 0x12d0
:clock_index dat 0
:clock dat 0

:clock_select;Param A. "selects" a clock for the clock functions to interact with.
set push, a
set push, b
set push, c
set push, i
set push, j
set push, x
set push, y
set push, z
set push, ex
set [clock_index], a
hwn i
set j, 0xffff
set z, a
:clock_search_loop
add j, 1
hwq j
ife a, clock_id_a
ife b, clock_id_b
sub z, 1
ife z, 0xffff
set [clock], j
ifn z, 0xffff
set pc, clock_search_loop
set ex, pop
set z, pop
set y, pop
set x, pop
set j, pop
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop

:clock_amount
set push, b
set push, c
set push, i
set push, j
set push, x
set push, y
set push, z
set push, ex
hwn i
set j, 0xffff
set z, 0
:clock_search_loop2
add j, 1
hwq j
ife a, clock_id_a
ife b, clock_id_b
add z, 1
ifn j, i
set pc, clock_search_loop2
set a, z
set ex, pop
set z, pop
set y, pop
set x, pop
set j, pop
set i, pop
set c, pop
set b, pop
set pc, pop

:clock_tick_set;Param B. Set B to a number and the clock will tick 60/B times per second.
set push, a
set a, 0
hwi [clock]
set a, pop
set pc, pop

:clock_tick_since;Return C. Returns the number of ticks since last time the ticks were set.
set push, a
set a, 1
hwi [clock]
set a, pop
set pc, pop

:clock_int_set;Param A. If A is nonzero, interrupts will be activated. If A is zero, interrupts will be deactivated.
set push, a
set push, b
set push, c
set c, a
set a, 2
set b, [clock_index]
bor b, 0x0100
ife c, 0
set b, 0
hwi [clock]
set c, pop
set b, pop
set a, pop
set pc, pop

; *************************
; Project: MegastageCS
; File: m35fd.drv.dasm
; *************************
.define m35fd_id_a 0x24c5
.define m35fd_id_b 0x4fd5
:m35fd_index dat 0xffff
:m35fd dat 0xffff
:m35fd_error_flag dat 0

:m35fd_select;Param A. "selects" a m35fd for the m35fd functions to interact with.
set push, a
set push, b
set push, c
set push, i
set push, j
set push, x
set push, y
set push, z
set push, ex
set [m35fd_index], a
hwn i
sub i, 1
set j, 0xffff
set z, a
:m35fd_search_loop
add j, 1
hwq j
ife a, m35fd_id_a
ife b, m35fd_id_b
sub z, 1
ife j, i
ifn z, 0xffff
jsr error_no_such_device
ife j, i
ifn z, 0xffff
set pc, m35fd_search_loop_brk
ife z, 0xffff
set [m35fd], j
ifn z, 0xffff
set pc, m35fd_search_loop
:m35fd_search_loop_brk
set ex, pop
set z, pop
set y, pop
set x, pop
set j, pop
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop

:m35fd_amount
set push, b
set push, c
set push, i
set push, j
set push, x
set push, y
set push, z
set push, ex
hwn i
sub i, 1
set j, 0xffff
set z, 0
:m35fd_search_loop2
add j, 1
hwq j
ife a, m35fd_id_a
ife b, m35fd_id_b
add z, 1
ifn j, i
set pc, m35fd_search_loop2
set a, z
set ex, pop
set z, pop
set y, pop
set x, pop
set j, pop
set i, pop
set c, pop
set b, pop
set pc, pop

:m35fd_check_status;returns the status of the m35fd in B and the latest error in C.
set push, a
set a, 0
hwi [m35fd]
set a, pop
set pc, pop

:m35fd_int_set;Param A. If A is nonzero, interrupts will be activated. If A is zero, interrupts will be deactivated.
set push, a
set push, x
set x, [m35fd_index]
bor x, 0x0200
ife a, 0
set x, 0
set a, 1
hwi [m35fd]
set x, pop
set a, pop
set pc, pop

:m35fd_sector_read;Param X and Y. Reads sector X to RAM starting at Y. Returns [m35fd_error_flag] as 0xffff if reading failed.
set push, a
set push, b
set push, x
set push, y
set a, 2
hwi [m35fd]
ifn b, 1
jsr set_RW_error
ifn b, 1
set [m35fd_error_flag], 0xffff
set y, pop
set x, pop
set b, pop
set a, pop
set pc, pop

:m35fd_sector_write;Param X and Y. Writes sector X from RAM starting at Y. Returns [m35fd_error_flag] as 0xffff if writing failed.
set push, a
set push, b
set push, x
set push, y
set a, 3
hwi [m35fd]
ifn b, 1
jsr set_RW_error
ifn b, 1
set [m35fd_error_flag], 0xffff
set y, pop
set x, pop
set b, pop
set a, pop
set pc, pop

:m35fd_multisector_read;Param A, B, and C. Reads a sequence of sectors starting at A to RAM starting at B with C set to the number of sectors. Returns A as 0xffff and B as something else if reading failed.
set push, a
set push, b
set push, c
:m35fd_read_loop
sub c, 1
:m35fd_read_retry
set [m35fd_error_flag], 0
set push, a
set push, b
jsr m35fd_sector_read
set b, pop
set a, pop
ife [m35fd_error_flag], 0xffff
        set pc, m35fd_read_error
add a, 1
add b, 512
ife c, 0
        set pc, m35fd_read_loop
:m35fd_read_end
set c, pop
set b, pop
set a, pop
set pc, pop
:m35fd_read_error
ife [m35fd_state_buffer], 3
        set pc, m35fd_read_retry
ife [m35fd_state_buffer], 2
        jsr fd_error_WP
ife [m35fd_state_buffer], 0
        jsr fd_error_no_media
set pc, m35fd_read_end

:m35fd_multisector_write;Param A and B. Writes a sequence of sectors starting at A from RAM starting at B with C set to the number of sectors. Returns A as 0xffff and B as something else if writing failed.
set push, a
set push, b
set push, c
:m35fd_write_loop
sub c, 1
:m35fd_write_retry
set [m35fd_error_flag], 0
set push, a
set push, b
jsr m35fd_sector_write
set b, pop
set a, pop
ife [m35fd_error_flag], 0xffff
        set pc, m35fd_write_error
add a, 1
add b, 512
ife c, 0
        set pc, m35fd_write_loop
:m35fd_write_end
set c, pop
set b, pop
set a, pop
set pc, pop
:m35fd_write_error
ife [m35fd_state_buffer], 3
        set pc, m35fd_write_retry
ife [m35fd_state_buffer], 2
        jsr fd_error_WP
ife [m35fd_state_buffer], 0
        jsr fd_error_no_media
set pc, m35fd_write_end

:set_RW_error
jsr m35fd_check_status
set [m35fd_state_source], [m35fd_index]
set [m35fd_state_buffer], a
set [m35fd_error_buffer], b
set pc, pop

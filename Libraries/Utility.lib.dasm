; *************************
; Project: MegastageCS
; File: Utility.lib.dasm
; *************************
:memory_copy;Param A, B, and C. Set A to area to be copied to, B to start of area to be copied from, and C to the length.
set push, a
set push, b
set push, c
add c, a
sub a, 1
sub b, 1
:mem_copy_loop
add a, 1
add b, 1
set [a], [b]
ifn a, c
set pc, mem_copy_loop
set c, pop
set b, pop
set a, pop
set pc, pop

:memory_bor ;Param: A, B, and C. A = start of ram to be processed, B = value to process with, C = length of area
set push, a
set push, b
set push, c
add c, a
sub a, 1
:mem_bor_loop
add a, 1
bor [a], b
ifn a, c
set pc, mem_bor_loop
set c, pop
set b, pop
set a, pop
set pc, pop

:memory_fill;Param: A, B, and C. A = value to process with, B = start of ram to be processed, C = length of area
set push, a
set push, b
set push, c
set push, i
sub b, 1
:mem_fill_loop
sub c, 1
add b, 1
set [b], a
ifn c, 0
set pc, mem_fill_loop
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop

:memory_compare;Param: A, B, and C. A = start of ram section 1, B = start of ram section 2, C = length of area. Sets I to 1 if the two sectors match and 0 otherwise.
set push, a
set push, b
set push, c
set push, i
sub b, 1
sub a, 1
set i, 1
:mem_comp_loop
sub c, 1
add b, 1
add a, 1
ifn [a], [b]
set c, 0
ifn [a], [b]
set i, 0
ifn c, 0
set pc, mem_comp_loop
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop

:dword_to_hexstring
set push, a
set push, b
set push, c
;digit 8
set [c], a
and [c], 0xf000
shr [c], 12
add [c], 0x0030
ifg [c], 0x0039
add [c], 0x0027
;digit 7
set [c+1], a
and [c+1], 0x0f00
shr [c+1], 8
add [c+1], 0x0030
ifg [c+1], 0x0039
add [c+1], 0x0027
;digit 6
set [c+2], a
and [c+2], 0x00f0
shr [c+2], 4
add [c+2], 0x0030
ifg [c+2], 0x0039
add [c+2], 0x0027
;digit 5
set [c+3], a
and [c+3], 0x000f
add [c+3], 0x0030
ifg [c+3], 0x0039
add [c+3], 0x0027
;digit 4
set [c+4], b
and [c+4], 0xf000
shr [c+4], 12
add [c+4], 0x0030
ifg [c+4], 0x0039
add [c+4], 0x0027
;digit 3
set [c+5], b
and [c+5], 0x0f00
shr [c+5], 8
add [c+5], 0x0030
ifg [c+5], 0x0039
add [c+5], 0x0027
;digit 2
set [c+6], b
and [c+6], 0x00f0
shr [c+6], 4
add [c+6], 0x0030
ifg [c+6], 0x0039
add [c+6], 0x0027
;digit 1
set [c+7], b
and [c+7], 0x000f
add [c+7], 0x0030
ifg [c+7], 0x0039
add [c+7], 0x0027
set c, pop
set b, pop
set a, pop
set pc, pop

;===========================================================================================================================
;these functions convert a word (or words) from register A (and B in the case of a dword), to an ASCII string starting at C.
;All credits for byte_tostring, word_tostring, and dword_tostring go to StillNoNumber 
;(http://www.0x10cforum.com/profile/2236555) formerly known as NaNDummy.

:byte_tostring ;A=number, C=start of ram to write to
;preparation
AND A, 0x00ff
SET [C], A
SET [C+1], A
SET [C+2], A
;last digit
MOD [C+2], 10
;fourth digit
DIV [C+1], 10
MOD [C+1], 10
;third digit
DIV [C], 100
MOD [C], 10
BOR [C], 0x0030
BOR [C+1], 0x0030
BOR [C+2], 0x0030
SET PC, POP

:word_tostring ;A=number, C=start of ram to write to
;preparation
SET [C], A
SET [C+1], A
SET [C+2], A
SET [C+3], A
SET [C+4], A
;last digit
MOD [C+4], 10
;fourth digit
DIV [C+3], 10
MOD [C+3], 10
;third digit
DIV [C+2], 100
MOD [C+2], 10
;second digit
DIV [C+1], 1000
MOD [C+1], 10
;first digit
DIV [C], 10000
MOD [C], 10
BOR [C], 0x0030
BOR [C+1], 0x0030
BOR [C+2], 0x0030
BOR [C+3], 0x0030
BOR [C+4], 0x0030
SET PC, POP

:dword_tostring ;C=start of ram to write to, A=high digits, B=low digits
set push, a
set push, b
set push, c
set push, i
set push, j
set push, x
set push, y
set push, z
set push, ex
set x, a
set y, b
set j, c
set a, 0
set b, 0
set c, 0
SET I, 10
ADD J, 10
:dword_tostring_loop
STD [variable1], X
SET [variable2], Y
JSR secondCode
SET [J], Y
SET X, [variable1]
SET Y, [variable2]
JSR div10
IFN I, 0
SET PC, dword_tostring_loop
BOR [J], 0x0030
BOR [J+1], 0x0030
BOR [J+2], 0x0030
BOR [J+3], 0x0030
BOR [J+4], 0x0030
BOR [J+5], 0x0030
BOR [J+6], 0x0030
BOR [J+7], 0x0030
BOR [J+8], 0x0030
BOR [J+9], 0x0030
set ex, pop
set z, pop
set y, pop
set x, pop
set j, pop
set i, pop
set c, pop
set b, pop
set a, pop
SET PC, POP
:secondCode
MOD Y, 10
MOD X, 10
MUL X, 6
ADD Y, X
MOD Y, 10
SET PC, POP
:div10
SET A, X
SET Z, Y
MOD A, 10
MOD Z, 10
SET B, A
MUL B, 6
ADD Z, B
DIV Z, 10
MUL A, 6553
DIV X, 10
DIV Y, 10
ADD Y, A
ADD Y, Z
SET PC, POP
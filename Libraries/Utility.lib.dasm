; *************************
; Project: MegastageCS
; File: Utility.lib.dasm
; *************************
;Param A, B, and C.
;Set A to area to be copied to, B to start of area to be copied from, and C to the length.
;These functions will preform their respective operations on the specified sectors with the value in C.
:memory_copy
set push, a
set push, b
set push, c
add c, a
sub a, 1
sub b, 1
:mem_copy_loop
add a, 1
add b, 1
set [a], [b]
ifn a, c
set pc, mem_copy_loop
set c, pop
set b, pop
set a, pop
set pc, pop

:memory_bor ;Param: A, B, and C. A = start of ram to be processed, B = value to process with, C = length of area
set push, a
set push, b
set push, c
add c, a
sub a, 1
:mem_bor_loop
add a, 1
bor [a], b
ifn a, c
set pc, mem_bor_loop
set c, pop
set b, pop
set a, pop
set pc, pop

:memory_fill;Param: A, B, and C. A = value to process with, B = start of ram to be processed, C = length of area
set push, a
set push, b
set push, c
set push, i
add c, 1
sub b, 1
:mem_fill_loop
sub c, 1
add b, 1
set [b], a
ifn c, 0
set pc, mem_fill_loop
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop

:xlcmg_assigner
set push, a
set push, b
set push, c
set push, i
jsr xlcmg_amount
set c, a
set a, 0xffff
:xlcmg_assgn_loop
add a, 1
set [OSerror], 0
jsr xlcmg_select
ife [OSerror], 1
set pc, xlcmg_assgn_loop_brk
jsr xlcmg_get_axis_vector
ife b, 0x0100
set [gyro_x_index], a
ife b, 0x0010
set [gyro_y_index], a
ife b, 0x0001
set [gyro_z_index], a
ifn a, c
set pc, xlcmg_assgn_loop
:xlcmg_assgn_loop_brk
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop

:gyro_x_index dat 0 ;roll gyro
:gyro_y_index dat 0 ;yaw gyro
:gyro_z_index dat 0 ;pitch gyro
:gyro_x_torque dat 0
:gyro_y_torque dat 0
:gyro_z_torque dat 0

:s8md_assigner
set push, a
set push, b
set push, c
set push, i
jsr s8md_amount
set c, a
set a, 0xffff
:s8md_assgn_loop
add a, 1
set [OSerror], 0
jsr s8md_select
ife [OSerror], 1
set pc, s8md_assgn_loop_brk
jsr s8md_get_vector
ife b, 0b0000000000001001
set [s8md_forward_index], a
ife b, 0b0000000000000001
set [s8md_reverse_index], a
ife b, 0b0000100100000000
set [s8md_right_index], a
ife b, 0b0000000100000000
set [s8md_left_index], a
ife b, 0b0000000010010000
set [s8md_down_index], a
ife b, 0b0000000000010000
set [s8md_up_index], a
ifn a, c
set pc, s8md_assgn_loop
:s8md_assgn_loop_brk
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop

:s8md_forward_index dat 0
:s8md_forward_power dat 0

:s8md_reverse_index dat 0
:s8md_reverse_power dat 0

:s8md_left_index dat 0
:s8md_left_power dat 0

:s8md_right_index dat 0
:s8md_right_power dat 0

:s8md_up_index dat 0
:s8md_up_power dat 0

:s8md_down_index dat 0
:s8md_down_power dat 0

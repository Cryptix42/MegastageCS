; *************************
; Project: MegastageCS
; File: Display.lib.dasm
; *************************
:init_screen ;param: A. sets up an lem1802 with the lem1802 index A.
set push, a
set push, b
set push, c
set c, 0
jsr lem1802_select
set b, VRAM
jsr lem1802_map_VRAM
set c, pop
set b, pop
set a, pop
set pc, pop

:update_screen
set push, a
set push, b
set push, c
set push, i
set a, VRAM
set c, vram_size

ife [page], 0
set b, screen_map1
ife [page], 1
set b, screen_map2
ife [page], 2
set b, screen_map3
ife [page], 3
set b, screen_map4
ife [page], 4
set b, screen_map5
ife [page], 5
set b, screen_map6
ife [page], 6
set b, screen_map7
jsr memory_copy

ife [page], 1
jsr update_orbital_data
ife [page], 2 
jsr update_times_data
ife [page], 3 
jsr update_pps_page
ife [page], 4 ;this isn't coded yet
jsr update_target_page
ife [page], 5 ;this isn't coded yet
jsr update_target_data

set b, text_color
jsr memory_bor
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop

:update_orbital_data
set push, a
set push, b
set push, c
set a, 0
jsr ffa_select
jsr ncc_select
jsr ffa_get_soi
set c, vector_dump
jsr ffa_orbital_state_vector
set b, vector_dump
set c, ncc_dump
jsr ncc_get_orbital_elements
set a, [ncc_dump]
set b, [ncc_dump+1]
set c, vram+32
jsr dword_tostring
set a, [ncc_dump+2]
set b, [ncc_dump+3]
set c, vram+64
jsr dword_tostring
set a, [ncc_dump+4]
set c, vram+96
jsr word_tostring
set a, [ncc_dump+5]
set c, vram+128
jsr angle_tostring
set a, [ncc_dump+6]
set c, vram+160
jsr angle_tostring
jsr ffa_get_soi
set c, ffa_dump
jsr ffa_field_data
set a, [ffa_dump]
set b, [ffa_dump+1]
set c, vram+256
jsr float_tostring
set a, [ffa_dump+2]
set c, vram+288
jsr angle_tostring
set a, [ffa_dump+3]
set c, vram+320
jsr angle_tostring
set c, pop
set b, pop
set a, pop
set pc, pop

:update_times_data
set push, a
set push, b
set push, c
set a, 0
jsr ffa_select
jsr ncc_select
jsr ffa_get_soi
set c, vector_dump
jsr ffa_orbital_state_vector
set b, vector_dump
set c, ncc_dump
jsr ncc_get_times
set a, [ncc_dump]
set b, [ncc_dump+1]
set c, vram+32
jsr dword_tostring
set a, [ncc_dump+2]
set b, [ncc_dump+3]
set c, vram+64
jsr dword_tostring
set a, [ncc_dump+4]
set b, [ncc_dump+5]
set c, vram+96
jsr dword_tostring
set a, [ncc_dump+6]
set b, [ncc_dump+7]
set c, vram+128
jsr dword_tostring
set a, [ncc_dump+8]
set b, [ncc_dump+9]
set c, vram+160
jsr dword_tostring
set a, [ncc_dump+10]
set b, [ncc_dump+11]
set c, vram+192
jsr dword_tostring
set a, [ncc_dump+12]
set b, [ncc_dump+13]
set c, vram+224
jsr dword_tostring
set c, pop
set b, pop
set a, pop
set pc, pop

:update_target_page
set push, a
set push, b
set push, c
set a, 0
jsr ncc_select
jsr hta90_select
set b, hta_signature_dump
jsr hta90_get_signatures
set i, 0xffff
set c, VRAM+34
:update_target_page_loop
add i, 1
add c, 32
ife i, 8
set c, VRAM+81
ife [hta_signature_dump+i], 0
set pc, update_target_page_brk
ife i, 15
set pc, update_target_page_brk
set b, [hta_signature_dump+i]
set push, c
jsr hta90_set_target
set c, pop
set b, hta_data_dump
set push, c
jsr hta90_get_target_data
set c, pop
set a, [hta_data_dump]
jsr word_tostring
set pc, update_target_page_loop
:update_target_page_brk
set c, pop
set b, pop
set a, pop
set pc, pop

:update_target_data
set push, a
set push, b
set push, c
set a, 0
jsr ncc_select
jsr hta90_select
jsr ffa_select
jsr ffa_get_soi
set c, vector_dump
jsr ffa_orbital_state_vector
set b, hta_signature_dump
jsr hta90_get_signatures
set b, [hta_signature_dump+target_index]
set push, c
jsr hta90_set_target
set c, pop
set b, hta_vector_dump
set push, c
jsr hta90_get_vector
set c, pop
set b, vector_dump
jsr ncc_compare_orbits
set c, VRAM+224
jsr angle_tostring
set a, b
set c, VRAM+192
jsr angle_tostring
set b, vector_dump
set c, ncc_dump
jsr ncc_get_orbital_elements
set a, [ncc_dump]
set b, [ncc_dump+1]
set c, VRAM+256
jsr dword_tostring
set a, [ncc_dump+2]
set b, [ncc_dump+3]
set c, VRAM+288
jsr dword_tostring
set b, hta_data_dump
jsr hta90_get_target_data
set a, [hta_data_dump+1]
set b, [hta_data_dump+2]
set c, VRAM+32
jsr dword_tostring
set a, [hta_data_dump+3]
set b, [hta_data_dump+4]
add c, 32
jsr float_tostring
set a, [hta_data_dump+5]
add c, 32
jsr angle_tostring
set a, [hta_data_dump+6]
add c, 32
jsr angle_tostring
set c, pop
set b, pop
set a, pop
set pc, pop

:update_pps_page
set push, a
set push, b
set push, c
set a, 0
jsr pps_select
set b, 0xffff
jsr pps_get_sector
set a, b
set c, vram+32
jsr word_tostring
set b, pps_dump
jsr pps_get_coords
set a, [pps_dump]
set b, [pps_dump+1]
set c, vram+192
jsr dword_tostring
set a, [pps_dump+2]
set b, [pps_dump+3]
set c, vram+224
jsr dword_tostring
set a, [pps_dump+4]
set b, [pps_dump+5]
set c, vram+256
jsr dword_tostring
set c, pop
set b, pop
set a, pop
set pc, pop

;these functions convert a word/words from register A (and B in the case of a dword), to an ASCII string starting at C.
;==============
:angle_tostring ;returns a 7 char string witha sign "-" or " ", degrees "000", a space, and minutes "00".
set push, ex
set push, i
set push, j
set i, a
set j, a
and j, 0b0000000000111111
and i, 0b0111111111000000
shr i, 6
set [c+6], j
set [c+5], j
set [c+4], key_space
set [c+3], i
set [c+2], i
set [c+1], i
ifg a, 0x7fff
set [c], [angle_tostring_const1]
ifl a, 0x8000
set [c], key_space

and [c+6], 0x000f
add [c+6], 0x0030
ifg [c+6], 0x0039
add [c+6], 7

and [c+5], 0x00f0
shr [c+5], 4
add [c+5], 0x0030
ifg [c+5], 0x0039
add [c+5], 7

and [c+3], 0x000f
add [c+3], 0x0030
ifg [c+3], 0x0039
add [c+3], 7

and [c+2], 0x00f0
shr [c+2], 4
add [c+2], 0x0030
ifg [c+2], 0x0039
add [c+2], 7

and [c+1], 0x0f00
shr [c+1], 8
add [c+1], 0x0030
ifg [c+1], 0x0039
add [c+1], 7

set i, pop
set j, pop
set ex, pop
set pc, pop

:word_tostring ;returns a 4 char hexadecimal string format: "0000"
set push, ex
set [c], a
and [c], 0xf000
shr [c], 12
add [c], 0x0030
ifg [c], 0x0039
add [c], 7

set [c+1], a
and [c+1], 0x0f00
shr [c+1], 8
add [c+1], 0x0030
ifg [c+1], 0x0039
add [c+1], 7

set [c+2], a
and [c+2], 0x00f0
shr [c+2], 4
add [c+2], 0x0030
ifg [c+2], 0x0039
add [c+2], 7

set [c+3], a
and [c+3], 0x000f
add [c+3], 0x0030
ifg [c+3], 0x0039
add [c+3], 7

set ex, pop
set pc, pop

:dword_tostring ;returns an 8 char hexadecimal string format: "00000000"
set push, a
set push, c
jsr word_tostring
set a, b
add c, 4
jsr word_tostring
set c, pop
set a, pop
set pc, pop

:float_tostring ;like a dword but the string is in scientific notation. and B is signed
set push, a
set push, c
set push, b
add c, 1
jsr word_tostring
sub c, 1
ifg b, 0x7fff
set [c], [angle_tostring_const1]
ifl b, 0x8000
set [c], key_space
set a, b
and a, 0b0111111111111111
add c, 6
jsr word_tostring
set b, pop
set c, pop
set a, pop
set pc, pop
;==============Display Data==================
.define vram_size 384
.define text_color 0x1900
.define border_color 0x1000
.define end_page 6
:vector_dump
dat 0, 0, 0, 0
dat 0, 0, 0, 0
dat 0, 0, 0, 0
:hta_vector_dump
dat 0, 0, 0, 0
dat 0, 0, 0, 0
dat 0, 0, 0, 0
:ncc_dump
dat 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff 
:ffa_dump
dat 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
:pps_dump
dat 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
:hta_signature_dump
dat 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
:hta_data_dump
dat 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
:angle_tostring_const1 dat "-"
:target_index dat 0
:page dat 0


:VRAM
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "        Initializing...         "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat 0

:screen_map1
dat "==== MegastageCS v0.3 Indev ===="
dat "        Ship Controls:          "
dat "      F & R - Throttle          "
dat "      W & A - Pitch             "
dat "      S & D - Yaw               "
dat "      Q & E - Roll              "
dat "      < & > - Page              "
dat "      X - Cut all throttle      "
dat "                                "
dat "                                "
dat "                                "
dat "            Page 1/7 >          "
dat 0
:screen_map2
dat "======Orbital info screen======="
dat "00000000 :apoapsis (100m)       "
dat "00000000 :periapse (100m)       "
dat "0000   :eccentricity (1000ths)  "
dat "-000 00  :inclination           "
dat "-000 00  :argument of periapse  "
dat "======Gravity field data========"
dat "Gravitational Parameter (kg):   "
dat "-0000^0000                      "
dat "-000 00 :directional pitch      "
dat "-000 00 :directional yaw        "
dat "          < Page 2/7 >          "
dat 0
:screen_map3
dat "=========Orbital times=========="
dat "00000000 :sec. till apoapsis    "
dat "00000000 :sec. till periapse    "
dat "00000000 :sec. till asc. node   "
dat "00000000 :sec. till des. node   "
dat "00000000 :sec. Orbital Period   "
dat "00000000 :m/s  Orbital Speed    "
dat "00000000 :m/s^2 Acceleration    "
dat "                                "
dat "                                "
dat "                                "
dat "          < Page 3/7 >          "
dat 0
:screen_map4
dat "=========PPS nav screen========="
dat "0000 :sector number             "
dat "8000=unknown sector,            "
dat "8001=no pulsars detected,       "
dat "8002=malfunction                "
dat "                                "
dat "00000000 :X coordinate (100m)   "
dat "00000000 :Y coordinate (100m)   "
dat "00000000 :Z coordinate (100m)   "
dat "                                "
dat "                                "
dat "          < Page 4/7 >          "
dat 0
:screen_map5
dat "=========Targeting Menu========="
dat "   selection key: object type   "
dat "0:             8:               "
dat "1:             9:               "
dat "2:             A:               "
dat "3:             B:               "
dat "4:             C:               "
dat "5:             D:               "
dat "6:             E:               "
dat "7:             F:               "
dat " 0=unknown 1=natural 2=manmade  "
dat "          < Page 5/7 >          "
dat 0
:screen_map6
dat "==========Target Data==========="
dat "00000000 :rough mass (kg)       "
dat "-0000^0000 :distance (m)        "
dat "-000 00 :directional pitch      "
dat "-000 00 :directional yaw        "
dat "======relative orbit data======="
dat "-000 00 :argument of periapse   "
dat "-000 00 :relative inclination   "
dat "00000000 :apoapsis (100m)       "
dat "00000000 :periapse (100m)       "
dat "                                "
dat "          < Page 6/7 >          "
dat 0
:screen_map7
dat "===========Credits=============="
dat "     Created By Cryptix         "
dat "     Founder and CEO of         "
dat "     Ender Innovations          "
dat "     Orlof - Megastage          "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "                                "
dat "          < Page 7/7            "
dat 0
:screen_maps_end dat 0